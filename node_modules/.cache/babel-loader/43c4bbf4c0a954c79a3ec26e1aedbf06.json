{"ast":null,"code":"import { gql } from '@apollo/client';\nexport const REGISTER_USER = gql`\n    mutation createUser($id: Int!, $nombres: String!, $apellidos: String!, $correo: String!, $fk_dependencia: Int!, $fk_estado: Int = 1, $fk_rol: Int = 4, $password: String!, $cargo: String!) {\n        insert_usuario(objects: { id: $id, nombres: $nombres, apellidos: $apellidos, correo: $correo, fk_dependencia: $fk_dependencia, fk_estado: $fk_estado }) {\n            returning {\n                id\n            }\n            affected_rows\n        }\n        insert_usuario_auth(objects: { fk_rol: $fk_rol, fk_usuario: $id, password: $password }) {\n            returning {\n                password\n            }\n            affected_rows\n        }\n        insert_usuario_cargo(objects: { fk_usuario: $id, cargo: $cargo }) {\n            returning {\n                cargo\n            }\n        }\n    }\n`;\nexport const UPDATE_BIEN = gql`\n    mutation editarBien($id: Int!, $descripcion: String, $observaciones: String, $fk_estado: Int, $espacio_fisico: String) {\n        update_bien(where: { id: { _eq: $id } }, _set: { descripcion: $descripcion, observaciones: $observaciones, fk_estado: $fk_estado, espacio_fisico: $espacio_fisico }) {\n            returning {\n                id\n            }\n        }\n    }\n`;\nexport const CREATE_COMPROBANTE_ENTRADA = gql`\n    mutation crearBienEntrada(\n        $clase_entrada: String = \"\",\n        $tipo_contrato: String = \"\",\n        $proveedor: String = \"\",\n        $observaciones: String = \"\",\n        $numero: Int = 1,\n        $factura: String = \"\",\n        $grupo: String = \"\",\n        $contratista: String = \"\",\n        $unidad: Int = 1,\n        $cantidad: Int = 1,\n        $descripcion_comprobante: String = \"\",\n        $valor_unitario: numeric = 0,\n        $subtotal: numeric = 0,\n        $porcentaje_iva: numeric = 0,\n        $total_iva: numeric = 0,\n        $total_cantidad: numeric = 0,\n        $total_cantidad_entrada: numeric = 0,\n        $subtotal_grupo: numeric = 0,\n        $total_entrada: numeric = 0\n    ) {\n        insert_bien(objects: {\n            fk_estado: 4,\n            comprobante: {\n                data: {\n                    clase_entrada: $clase_entrada,\n                    tipo_contrato: $tipo_contrato,\n                    proveedor: $proveedor,\n                    observaciones: $observaciones,\n                    numero: $numero,\n                    factura: $factura,\n                    grupo: $grupo,\n                    unidad: $unidad,\n                    cantidad: $cantidad,\n                    descripcion_comprobante: $descripcion_comprobante,\n                    valor_unitario: $valor_unitario,\n                    subtotal: $subtotal,\n                    porcentaje_iva: $porcentaje_iva,\n                    total_iva: $total_iva,\n                    total_cantidad: $total_cantidad,\n                    total_cantidad_entrada: $total_cantidad_entrada,\n                    subtotal_grupo: $subtotal_grupo,\n                    total_entrada: $total_entrada,\n                    fk_estado: 8\n                }\n            }\n        }) {\n            returning {\n                id\n                comprobante {\n                    id\n                }\n            }\n        }\n    }\n`;\nexport const EDIT_BIEN_SALIDA = gql`\n    mutation editarBienSalida(\n        $idBien: Int!,\n        $fk_usuario: Int!,\n        $descripcion: String = \"\",\n        $tipo_bien: String = \"\",\n        $placa: String!,\n        $nombre: String = \"\",\n        $marca_serie: String = \"\",\n        $espacio_fisico: String = \"\",\n        $idComprobante: Int!,\n        $salida: String = \"\"\n        $fecha_creacion: timestamptz! \n    ) {\n        update_bien(where: { id: { _eq: $idBien } },\n            _set: {\n            fk_usuario: $fk_usuario,\n            descripcion: $descripcion,\n            tipo_bien: $tipo_bien,\n            placa: $placa,\n            nombre: $nombre,\n            marca_serie: $marca_serie,\n            fk_estado: 1,\n            espacio_fisico: $espacio_fisico,\n            fecha_creacion: $fecha_creacion\n        }) {\n            returning {\n                id\n            }\n        }\n        update_comprobante(where: { id: { _eq: $idComprobante } },\n            _set: {\n            fk_estado: 9,\n            salida: $salida\n        }) {\n            affected_rows\n        }\n    }\n`;\nexport const TRASLADO_DEPENDENCIA = gql`\n    mutation trasladoDependencia($fk_dependencia: Int!, $fk_usuario: Int!) {\n        update_encargado_dependencia(where: { fk_dependencia: { _eq: $fk_dependencia } }, _set: { fk_usuario: $fk_usuario }) {\n            affected_rows\n        }\n        update_usuario_auth(where: { fk_usuario: { _eq: $fk_usuario } }, _set: { fk_rol: 3 }) {\n            affected_rows\n        }\n    }\n`;\nexport const TRASLADO_BIENES = id => gql`\n    mutation trasladoBienes($fk_usuario: Int!) {\n        update_bien(where: {id: {_eq: ${id}}}, _set: {fk_usuario: $fk_usuario, fk_estado: 6}) {\n            affected_rows\n        }\n    }\n`;\nexport const UPDATE_USUARIO = gql`\n    mutation updateUsuarioById($id: Int!, $nombres: String!, $apellidos: String!, $correo: String!) {\n        update_usuario(where: { id: { _eq: $id } }, _set: { nombres: $nombres, apellidos: $apellidos, correo: $correo }) {\n            affected_rows\n        }\n    }\n`;\nexport const CREATE_DEPENDENCIA = gql`\n    mutation crearDependencia($dependencia: String!, $fk_sede: Int!) {\n        insert_dependencia(objects: { fk_sede: $fk_sede, dependencia: $dependencia }) {\n            affected_rows\n            returning {\n                dependencia\n                id\n            }\n        }\n    }\n`;\nexport const CREATE_DEPENDENCIA_USER = gql`\n    mutation crearEncargadoDependencia($fk_usuario: Int!, $fk_dependencia: Int!) {\n        insert_encargado_dependencia(objects: { fk_dependencia: $fk_dependencia, fk_usuario: $fk_usuario }) {\n            affected_rows\n        }\n        update_usuario_auth(where: { fk_usuario: { _eq: $fk_usuario } }, _set: { fk_rol: 3 }) {\n            affected_rows\n        }\n    }\n`;\nexport const CREATE_SEDE = gql`\n    mutation crearSede($sede: String!) {\n        insert_sede(objects: { sede: $sede }) {\n            affected_rows\n        }\n    }\n`;\nexport const DISABLE_USER = gql`\n    mutation deshabilitarUsuario($id: Int!) {\n        update_usuario(where: { _and: [{ id: { _eq: $id } }, { auth: { fk_rol: { _neq: 1 } } }] },\n            _set: { fk_estado: 2 }) {\n            affected_rows\n        }\n    }\n`;\nexport const UPDATE_PWD = gql`\n    mutation updateUserPw($id: Int!, $password: String) {\n        update_usuario_auth(where: { fk_usuario: { _eq: $id } }, _set: { password: $password }) {\n            affected_rows\n        }\n    }\n`;\nexport const CHANGE_ROL = gql`\n    mutation edirUserRole($fk_usuario: Int!, $fk_rol: Int!) {\n        update_usuario_auth(where: { fk_usuario: { _eq: $fk_usuario } }, _set: { fk_rol: $fk_rol }) {\n            affected_rows\n        }\n    }\n`;\nexport const UPDATE_DEPENDENCIA = gql`\n    mutation updateUsuarioDependencia($idUsuario: Int!, $fk_dependencia: Int!) {\n        update_usuario(where: { id: { _eq: $idUsuario } }, _set: { fk_dependencia: $fk_dependencia }) {\n            affected_rows\n        }\n    }\n`;\nexport const UPDATE_BIEN_STATE = gql`\n    mutation darBajaBien($id: Int!) {\n        update_bien(where: { id: { _eq: $id } }, _set: { fk_estado: 7 }) {\n            affected_rows\n        }\n    }\n`;","map":{"version":3,"sources":["/home/jorg/Downloads/REPOSITORIOS UD/proyecto_frontend_v0.7.0/gestion_inventarios_frontend-develop/src/graphql/mutations.js"],"names":["gql","REGISTER_USER","UPDATE_BIEN","CREATE_COMPROBANTE_ENTRADA","EDIT_BIEN_SALIDA","TRASLADO_DEPENDENCIA","TRASLADO_BIENES","id","UPDATE_USUARIO","CREATE_DEPENDENCIA","CREATE_DEPENDENCIA_USER","CREATE_SEDE","DISABLE_USER","UPDATE_PWD","CHANGE_ROL","UPDATE_DEPENDENCIA","UPDATE_BIEN_STATE"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,OAAO,MAAMC,aAAa,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;CAA1B;AAsBP,OAAO,MAAME,WAAW,GAAGF,GAAI;;;;;;;;CAAxB;AAUP,OAAO,MAAMG,0BAA0B,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAvC;AA0DP,OAAO,MAAMI,gBAAgB,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA7B;AAwCP,OAAO,MAAMK,oBAAoB,GAAGL,GAAI;;;;;;;;;CAAjC;AAUP,OAAO,MAAMM,eAAe,GAAGC,EAAE,IAAIP,GAAI;;wCAEDO,EAAG;;;;CAFpC;AAQP,OAAO,MAAMC,cAAc,GAAGR,GAAI;;;;;;CAA3B;AAQP,OAAO,MAAMS,kBAAkB,GAAGT,GAAI;;;;;;;;;;CAA/B;AAYP,OAAO,MAAMU,uBAAuB,GAAGV,GAAI;;;;;;;;;CAApC;AAWP,OAAO,MAAMW,WAAW,GAAGX,GAAI;;;;;;CAAxB;AAQP,OAAO,MAAMY,YAAY,GAAGZ,GAAI;;;;;;;CAAzB;AASP,OAAO,MAAMa,UAAU,GAAGb,GAAI;;;;;;CAAvB;AAOP,OAAO,MAAMc,UAAU,GAAGd,GAAI;;;;;;CAAvB;AAQP,OAAO,MAAMe,kBAAkB,GAAGf,GAAI;;;;;;CAA/B;AAQP,OAAO,MAAMgB,iBAAiB,GAAGhB,GAAI;;;;;;CAA9B","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const REGISTER_USER = gql`\n    mutation createUser($id: Int!, $nombres: String!, $apellidos: String!, $correo: String!, $fk_dependencia: Int!, $fk_estado: Int = 1, $fk_rol: Int = 4, $password: String!, $cargo: String!) {\n        insert_usuario(objects: { id: $id, nombres: $nombres, apellidos: $apellidos, correo: $correo, fk_dependencia: $fk_dependencia, fk_estado: $fk_estado }) {\n            returning {\n                id\n            }\n            affected_rows\n        }\n        insert_usuario_auth(objects: { fk_rol: $fk_rol, fk_usuario: $id, password: $password }) {\n            returning {\n                password\n            }\n            affected_rows\n        }\n        insert_usuario_cargo(objects: { fk_usuario: $id, cargo: $cargo }) {\n            returning {\n                cargo\n            }\n        }\n    }\n`\n\nexport const UPDATE_BIEN = gql`\n    mutation editarBien($id: Int!, $descripcion: String, $observaciones: String, $fk_estado: Int, $espacio_fisico: String) {\n        update_bien(where: { id: { _eq: $id } }, _set: { descripcion: $descripcion, observaciones: $observaciones, fk_estado: $fk_estado, espacio_fisico: $espacio_fisico }) {\n            returning {\n                id\n            }\n        }\n    }\n`\n\nexport const CREATE_COMPROBANTE_ENTRADA = gql`\n    mutation crearBienEntrada(\n        $clase_entrada: String = \"\",\n        $tipo_contrato: String = \"\",\n        $proveedor: String = \"\",\n        $observaciones: String = \"\",\n        $numero: Int = 1,\n        $factura: String = \"\",\n        $grupo: String = \"\",\n        $contratista: String = \"\",\n        $unidad: Int = 1,\n        $cantidad: Int = 1,\n        $descripcion_comprobante: String = \"\",\n        $valor_unitario: numeric = 0,\n        $subtotal: numeric = 0,\n        $porcentaje_iva: numeric = 0,\n        $total_iva: numeric = 0,\n        $total_cantidad: numeric = 0,\n        $total_cantidad_entrada: numeric = 0,\n        $subtotal_grupo: numeric = 0,\n        $total_entrada: numeric = 0\n    ) {\n        insert_bien(objects: {\n            fk_estado: 4,\n            comprobante: {\n                data: {\n                    clase_entrada: $clase_entrada,\n                    tipo_contrato: $tipo_contrato,\n                    proveedor: $proveedor,\n                    observaciones: $observaciones,\n                    numero: $numero,\n                    factura: $factura,\n                    grupo: $grupo,\n                    unidad: $unidad,\n                    cantidad: $cantidad,\n                    descripcion_comprobante: $descripcion_comprobante,\n                    valor_unitario: $valor_unitario,\n                    subtotal: $subtotal,\n                    porcentaje_iva: $porcentaje_iva,\n                    total_iva: $total_iva,\n                    total_cantidad: $total_cantidad,\n                    total_cantidad_entrada: $total_cantidad_entrada,\n                    subtotal_grupo: $subtotal_grupo,\n                    total_entrada: $total_entrada,\n                    fk_estado: 8\n                }\n            }\n        }) {\n            returning {\n                id\n                comprobante {\n                    id\n                }\n            }\n        }\n    }\n`\n\nexport const EDIT_BIEN_SALIDA = gql`\n    mutation editarBienSalida(\n        $idBien: Int!,\n        $fk_usuario: Int!,\n        $descripcion: String = \"\",\n        $tipo_bien: String = \"\",\n        $placa: String!,\n        $nombre: String = \"\",\n        $marca_serie: String = \"\",\n        $espacio_fisico: String = \"\",\n        $idComprobante: Int!,\n        $salida: String = \"\"\n        $fecha_creacion: timestamptz! \n    ) {\n        update_bien(where: { id: { _eq: $idBien } },\n            _set: {\n            fk_usuario: $fk_usuario,\n            descripcion: $descripcion,\n            tipo_bien: $tipo_bien,\n            placa: $placa,\n            nombre: $nombre,\n            marca_serie: $marca_serie,\n            fk_estado: 1,\n            espacio_fisico: $espacio_fisico,\n            fecha_creacion: $fecha_creacion\n        }) {\n            returning {\n                id\n            }\n        }\n        update_comprobante(where: { id: { _eq: $idComprobante } },\n            _set: {\n            fk_estado: 9,\n            salida: $salida\n        }) {\n            affected_rows\n        }\n    }\n`\n\nexport const TRASLADO_DEPENDENCIA = gql`\n    mutation trasladoDependencia($fk_dependencia: Int!, $fk_usuario: Int!) {\n        update_encargado_dependencia(where: { fk_dependencia: { _eq: $fk_dependencia } }, _set: { fk_usuario: $fk_usuario }) {\n            affected_rows\n        }\n        update_usuario_auth(where: { fk_usuario: { _eq: $fk_usuario } }, _set: { fk_rol: 3 }) {\n            affected_rows\n        }\n    }\n`\nexport const TRASLADO_BIENES = id => gql`\n    mutation trasladoBienes($fk_usuario: Int!) {\n        update_bien(where: {id: {_eq: ${id}}}, _set: {fk_usuario: $fk_usuario, fk_estado: 6}) {\n            affected_rows\n        }\n    }\n`\n\nexport const UPDATE_USUARIO = gql`\n    mutation updateUsuarioById($id: Int!, $nombres: String!, $apellidos: String!, $correo: String!) {\n        update_usuario(where: { id: { _eq: $id } }, _set: { nombres: $nombres, apellidos: $apellidos, correo: $correo }) {\n            affected_rows\n        }\n    }\n`\n\nexport const CREATE_DEPENDENCIA = gql`\n    mutation crearDependencia($dependencia: String!, $fk_sede: Int!) {\n        insert_dependencia(objects: { fk_sede: $fk_sede, dependencia: $dependencia }) {\n            affected_rows\n            returning {\n                dependencia\n                id\n            }\n        }\n    }\n`\n\nexport const CREATE_DEPENDENCIA_USER = gql`\n    mutation crearEncargadoDependencia($fk_usuario: Int!, $fk_dependencia: Int!) {\n        insert_encargado_dependencia(objects: { fk_dependencia: $fk_dependencia, fk_usuario: $fk_usuario }) {\n            affected_rows\n        }\n        update_usuario_auth(where: { fk_usuario: { _eq: $fk_usuario } }, _set: { fk_rol: 3 }) {\n            affected_rows\n        }\n    }\n`\n\nexport const CREATE_SEDE = gql`\n    mutation crearSede($sede: String!) {\n        insert_sede(objects: { sede: $sede }) {\n            affected_rows\n        }\n    }\n`\n\nexport const DISABLE_USER = gql`\n    mutation deshabilitarUsuario($id: Int!) {\n        update_usuario(where: { _and: [{ id: { _eq: $id } }, { auth: { fk_rol: { _neq: 1 } } }] },\n            _set: { fk_estado: 2 }) {\n            affected_rows\n        }\n    }\n`\n\nexport const UPDATE_PWD = gql`\n    mutation updateUserPw($id: Int!, $password: String) {\n        update_usuario_auth(where: { fk_usuario: { _eq: $id } }, _set: { password: $password }) {\n            affected_rows\n        }\n    }\n`\nexport const CHANGE_ROL = gql`\n    mutation edirUserRole($fk_usuario: Int!, $fk_rol: Int!) {\n        update_usuario_auth(where: { fk_usuario: { _eq: $fk_usuario } }, _set: { fk_rol: $fk_rol }) {\n            affected_rows\n        }\n    }\n`\n\nexport const UPDATE_DEPENDENCIA = gql`\n    mutation updateUsuarioDependencia($idUsuario: Int!, $fk_dependencia: Int!) {\n        update_usuario(where: { id: { _eq: $idUsuario } }, _set: { fk_dependencia: $fk_dependencia }) {\n            affected_rows\n        }\n    }\n`\n\nexport const UPDATE_BIEN_STATE = gql`\n    mutation darBajaBien($id: Int!) {\n        update_bien(where: { id: { _eq: $id } }, _set: { fk_estado: 7 }) {\n            affected_rows\n        }\n    }\n`\n\n"]},"metadata":{},"sourceType":"module"}