{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects'; // Login Redux States\n\nimport { CHECK_LOGIN } from './actionTypes';\nimport { apiError, loginUserSuccessful, loginUserFailed } from './actions'; // AUTH related methods\n\nimport { setLoggeedInUser, login } from '../../../helpers/authUtils'; //If user is login then dispatch redux action's are directly from here.\n\nfunction* loginUser({\n  payload: {\n    correo,\n    password,\n    history\n  }\n}) {\n  try {\n    const response = yield call(login, {\n      correo,\n      password\n    });\n\n    if (response) {\n      setLoggeedInUser(response);\n      yield put(loginUserSuccessful(response));\n      history.push('/');\n    } else {\n      yield put(loginUserFailed('Credenciales Invalidas'));\n    }\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(CHECK_LOGIN, loginUser);\n}\n\nfunction* loginSaga() {\n  yield all([fork(watchUserLogin)]);\n}\n\nexport default loginSaga;","map":{"version":3,"sources":["/home/jorg/Downloads/REPOSITORIOS UD/proyecto_frontend_v0.7.0/gestion_inventarios_frontend-develop/src/store/auth/login/saga.js"],"names":["takeEvery","fork","put","all","call","CHECK_LOGIN","apiError","loginUserSuccessful","loginUserFailed","setLoggeedInUser","login","loginUser","payload","correo","password","history","response","push","error","watchUserLogin","loginSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,QAAT,EAAmBC,mBAAnB,EAAwCC,eAAxC,QAA+D,WAA/D,C,CAEA;;AACA,SAASC,gBAAT,EAA2BC,KAA3B,QAAwC,4BAAxC,C,CAEA;;AACA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB;AAAX,CAApB,EAAgE;AACxD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACM,KAAD,EAAQ;AAACG,MAAAA,MAAD;AAASC,MAAAA;AAAT,KAAR,CAA3B;;AACA,QAAGE,QAAH,EAAa;AACTP,MAAAA,gBAAgB,CAACO,QAAD,CAAhB;AACA,YAAMd,GAAG,CAACK,mBAAmB,CAACS,QAAD,CAApB,CAAT;AACAD,MAAAA,OAAO,CAACE,IAAR,CAAa,GAAb;AAEH,KALD,MAKO;AACH,YAAMf,GAAG,CAACM,eAAe,CAAC,wBAAD,CAAhB,CAAT;AACH;AACJ,GAVD,CAUE,OAAOU,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACI,QAAQ,CAACY,KAAD,CAAT,CAAT;AACH;AACR;;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMnB,SAAS,CAACK,WAAD,EAAcM,SAAd,CAAf;AACH;;AAED,UAAUS,SAAV,GAAsB;AAClB,QAAMjB,GAAG,CAAC,CAACF,IAAI,CAACkB,cAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeC,SAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\n\n// Login Redux States\nimport { CHECK_LOGIN } from './actionTypes';\nimport { apiError, loginUserSuccessful, loginUserFailed } from './actions';\n\n// AUTH related methods\nimport { setLoggeedInUser, login } from '../../../helpers/authUtils';\n\n//If user is login then dispatch redux action's are directly from here.\nfunction* loginUser({ payload: { correo, password, history } }) {\n        try {\n            const response = yield call(login, {correo, password});\n            if(response) {\n                setLoggeedInUser(response);\n                yield put(loginUserSuccessful(response));\n                history.push('/');\n\n            } else {\n                yield put(loginUserFailed('Credenciales Invalidas')) \n            }\n        } catch (error) {\n            yield put(apiError(error));\n        }\n}\n\nexport function* watchUserLogin() {\n    yield takeEvery(CHECK_LOGIN, loginUser)\n}\n\nfunction* loginSaga() {\n    yield all([fork(watchUserLogin)]);\n}\n\nexport default loginSaga;"]},"metadata":{},"sourceType":"module"}