{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects'; //Account Redux states\n\nimport { REGISTER_USER } from './actionTypes';\nimport { registerUserSuccessful, apiError, duplicateRegister } from './actions'; //AUTH related methods\n\nimport { register } from '../../../helpers/authUtils'; // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    const response = yield call(register, user);\n    yield put(registerUserSuccessful(response));\n    return;\n  } catch (error) {\n    if (String(error).includes('duplicate') || String(error).includes('unique')) yield put(duplicateRegister(error));else yield put(apiError(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["/home/jorg/Downloads/REPOSITORIOS UD/proyecto_frontend_v0.7.0/gestion_inventarios_frontend-develop/src/store/auth/register/saga.js"],"names":["takeEvery","fork","put","all","call","REGISTER_USER","registerUserSuccessful","apiError","duplicateRegister","register","registerUser","payload","user","response","error","String","includes","watchUserRegister","accountSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,sBAAT,EAAiCC,QAAjC,EAA2CC,iBAA3C,QAAoE,WAApE,C,CAEA;;AACA,SAASC,QAAT,QAAyB,4BAAzB,C,CAEA;;AACA,UAAUC,YAAV,CAAuB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAvB,EAA8C;AAC1C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACK,QAAD,EAAWG,IAAX,CAA3B;AACA,UAAMV,GAAG,CAACI,sBAAsB,CAACO,QAAD,CAAvB,CAAT;AACA;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,QAAGC,MAAM,CAACD,KAAD,CAAN,CAAcE,QAAd,CAAuB,WAAvB,KAAuCD,MAAM,CAACD,KAAD,CAAN,CAAcE,QAAd,CAAuB,QAAvB,CAA1C,EACI,MAAMd,GAAG,CAACM,iBAAiB,CAACM,KAAD,CAAlB,CAAT,CADJ,KAGI,MAAMZ,GAAG,CAACK,QAAQ,CAACO,KAAD,CAAT,CAAT;AACP;AACJ;;AAED,OAAO,UAAUG,iBAAV,GAA8B;AACjC,QAAMjB,SAAS,CAACK,aAAD,EAAgBK,YAAhB,CAAf;AACH;;AAED,UAAUQ,WAAV,GAAwB;AACpB,QAAMf,GAAG,CAAC,CAACF,IAAI,CAACgB,iBAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeC,WAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\n\n//Account Redux states\nimport { REGISTER_USER } from './actionTypes';\nimport { registerUserSuccessful, apiError, duplicateRegister } from './actions';\n\n//AUTH related methods\nimport { register } from '../../../helpers/authUtils';\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }) {\n    try {\n        const response = yield call(register, user);\n        yield put(registerUserSuccessful(response));\n        return;\n    } catch (error) {\n        if(String(error).includes('duplicate') || String(error).includes('unique') ) \n            yield put(duplicateRegister(error));\n        else \n            yield put(apiError(error));\n    }\n}\n\nexport function* watchUserRegister() {\n    yield takeEvery(REGISTER_USER, registerUser)\n}\n\nfunction* accountSaga() {\n    yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;"]},"metadata":{},"sourceType":"module"}